<?php

/**
 * @wordpress-plugin
 * Plugin Name:       Kntnt Fix for Kadence Theme Breadcrumbs
 * Plugin URI:        https://www.kntnt.com/
 * Description:       Improves how breadcrumbs are generated by Kadence Theme.
 * Version:           1.2.0
 * Author:            Thomas Barregren
 * Author URI:        https://www.kntnt.com/
 * License:           GPL-3.0+
 * License URI:       http://www.gnu.org/licenses/gpl-3.0.txt
 */

namespace Kntnt\Kadence_Theme_Breadcrumb_Fixes;

defined( 'ABSPATH' ) && new Plugin();

// Unfortunately, Kadence Theme is opinionated on how breadcrumbs should be.
// For instance doesn't the post archive get a breadcrumb. And the breadcrumb
// of posts themselves lacks the category base name which should link back to
// the blog page. Also unfortunately, Kadence Theme don't provide a filter that
// allows us to output our own breadcrumb. This plugin solves that by using the
// few filters available.
final class Plugin {

	private $args;

	private $settings;

	private $html;

	private $sep;

	private $link;

	private $the_title_hooks;

	private $menu_items;

	public function __construct() {

		// All filters are applied in kadence/inc/components/breadcrumbs/component.php
		add_filter( 'kadence_local_breadcrumb_args', [ $this, 'kadence_local_breadcrumb_args' ], 9999 );
		add_filter( 'kadence_breadcrumb_args', [ $this, 'kadence_breadcrumb_args' ] );
		add_filter( 'kadence_breadcrumbs_after_home', [ $this, 'kadence_breadcrumbs_after_home' ] );
		add_filter( 'kadence_breadcrumb_html', [ $this, 'kadence_breadcrumb_html' ] );

	}

	public function kadence_local_breadcrumb_args( $args ) {

		// Save the arguments for later use.
		$this->args = $args;

		return $args;

	}

	public function kadence_breadcrumb_args( $args ) {

		// We need to save the settings for later use. Unfortunately,
		// Kadence Theme don't provide any means to filter the settings, only
		// to override. Therefore, following is almost an exact copy of the
		// original settings. The only tweak is that the default delimiter /
		// is replaced with â€º. It can still be overridden by implementing the
		// filter `kadence_breadcrumb_delimiter`.
		$this->settings = array(
			'home'             => true,
			'home_icon'        => \Kadence\kadence()->option( 'breadcrumb_home_icon' ),
			'before'           => '<span class="kadence-bread-current">',
			'after'            => '</span>',
			'home_link'        => home_url( '/' ),
			'wrap_before'      => '<nav id="kadence-breadcrumbs" aria-label="' . esc_attr__( 'Breadcrumbs', 'kadence' ) . '"  class="kadence-breadcrumbs"><div class="kadence-breadcrumb-container"' . ( $this->args['color_style'] ? ' style="' . esc_attr( $this->args['color_style'] ) . '"' : '' ) . '>',
			'wrap_after'       => '</div></nav>',
			'delimiter'        => apply_filters( 'kadence_breadcrumb_delimiter', 'â€º' ),
			'delimiter_before' => '<span class="bc-delimiter">',
			'delimiter_after'  => '</span>',
			'link_before'      => '<span>',
			'link_after'       => '</span>',
			'link_in_before'   => '<span>',
			'link_in_after'    => '</span>',
		);

		// We need the HTML for the link-separator later. Unfortunately,
		// Kadence Theme don't provide any means to filter this HTML. So we
		// use the same code to create it.
		$this->sep = ' ' . $this->settings['delimiter_before'] . $this->settings['delimiter'] . $this->settings['delimiter_after'] . ' ';

		// We need the HTML for the printf-format string for links.
		// Unfortunately, Kadence Theme don't provide any means to filter this
		// HTML. So we use the same code to create it.
		$this->link = $this->settings['link_before'] . '<a href="%1$s" itemprop="url" ' . ( $this->args['color_style'] ? 'style="' . esc_attr( $this->args['color_style'] ) . '"' : '' ) . '>' . $this->settings['link_in_before'] . '%2$s' . $this->settings['link_in_after'] . '</a>' . $this->settings['link_after'];

		return $this->settings;

	}

	public function kadence_breadcrumbs_after_home( $html ) {

		// $html contains everything up to and including the home link.
		// Let's save it for later use.
		$this->html = $html;

		// Unfortunately, Kadence Theme gets the text of the links by passing
		// the linked page's title through `the_title`-filters. Some plugins
		// implement this filter to alter the title in a way that don't work
		// in a breadcrumb. An example is EditorsKit by Extendify; it replaces
		// the title with an empty string if the editor has checked that the
		// title should not be outputted. The solution is to temporarily
		// disable all filters.
		global $wp_filter;
		$this->the_title_hooks = $wp_filter['the_title'];
		unset( $wp_filter['the_title'] );

		return $html;

	}

	public function kadence_breadcrumb_html( $html ) {

		// Enable the previously disabled `the_title`-filters.
		global $wp_filter;
		$wp_filter['the_title'] = $this->the_title_hooks;

		$menu_location  = apply_filters( 'kntnt-kadence-theme-breadcrumb-fix-menu_location', 'primary' );
		$menu_locations = get_nav_menu_locations();
		if ( isset( $menu_locations[ $menu_location ] ) && ( $this->menu_items = wp_get_nav_menu_items( $menu_locations[ $menu_location ] ) ) ) {

			// If current url is in menu, create the breadcrumbs by the menu hierarchy.
			$url         = $this->current_url();
			$breadcrumbs = $this->breadcrumbs_by_menu( $url );

			// If current url is not in menu, find its category and backtrack
			// its ancestors until a menu item potentially is found.
			if ( ! $breadcrumbs ) {

				// If current url is a post, let's create a fake url from its category.
				if ( is_singular( 'post' ) ) {

					// Get the post object. Abort at failure.
					if ( ! ( $post = get_post() ) ) {
						return $html;
					}

					// Get post's categories. Abort at failure.
					if ( ! ( $categories = get_the_terms( $post, 'category' ) ) ) {
						return $html;
					}

					// Get the first category.
					$cat = array_shift( $categories );

					// Create a list of category and its ancestors.
					$dirs[] = $cat->slug;
					while ( $cat->parent ) {
						$cat    = get_category( $cat->parent );
						$dirs[] = $cat->slug;
					}
					$dirs = array_reverse( $dirs );

					// Remove the root category; it will be included in
					// the category link retrieved below.
					array_shift( $dirs );

					// Build the fake url up to but not including the
					// post slug, which is saved in $breadcrumbs[] as if it
					// has already been peeled off.
					$url           = get_category_link( $cat ) . join( '/', $dirs );
					$breadcrumbs[] = $post->post_name;

				}

				// Add category hierarchy breadcrumbs one by one until it's
				// possible to create the remaining breadcrumbs from the meany
				// hierarchy.
				while ( ! ( $breadcrumbs_by_menu = $this->breadcrumbs_by_menu( $url ) ) ) {
					if ( ! ( $breadcrumb = $this->breadcrumb_by_category( $url ) ) ) {
						return $html; // Abort
					}
					$breadcrumbs[] = $breadcrumb;
					$url           = dirname( $url );
				}
				$breadcrumbs = array_merge( $breadcrumbs, $breadcrumbs_by_menu );

			}

			// Create new breadcrumb HTML.
			if ( $breadcrumbs ) {
				$breadcrumbs = array_reverse( $breadcrumbs );
				if ( ! $this->args['show_title'] ) {
					array_pop( $breadcrumbs );
				}
				$html = $this->html . join( $this->sep, $breadcrumbs ) . $this->settings['wrap_after'];
			}

		}

		return $html;

	}

	private function current_url() {
		global $wp;
		return home_url( $wp->request );
	}

	private function breadcrumbs_by_menu( string $url ) {
		$breadcrumbs = [];
		if ( $menu_item = $this->get_menu_item_by_url( $url ) ) {
			$breadcrumbs[] = $this->link( $menu_item->url, $menu_item->title );
			while ( $menu_item = $this->get_menu_item_by_id( $menu_item->menu_item_parent ) ) {
				$breadcrumbs[] = $this->link( $menu_item->url, $menu_item->title );
			};
		}
		return $breadcrumbs;
	}

	private function breadcrumb_by_category( string $url ) {
		global $wp_query;
		if ( $cat = get_category_by_slug( basename( $url ) ) ) {
			return $this->link( $url, $cat->name );
		} else {
			return '';
		}
	}

	private function get_menu_item_by_url( $url ) {
		static $url_map = null;
		if ( ! $url_map ) {
			foreach ( $this->menu_items as $menu_item ) {
				$url_map[ rtrim( $menu_item->url, '/\\' ) ] = $menu_item;
			}
		}
		return $url_map[ rtrim( $url, '/\\' ) ] ?? null;
	}

	private function get_menu_item_by_id( $menu_item_parent ) {
		$found_menu_item = null;
		foreach ( $this->menu_items as $menu_item ) {
			if ( $menu_item->ID == $menu_item_parent ) {
				$found_menu_item = $menu_item;
				break;
			}
		}
		return $found_menu_item;
	}

	private function link( $url, $title ) {
		return sprintf( $this->link, $url, $title );
	}

}
